using System;

class InputHandler
{
    public static int[,] GetUserInputForArray()
    {
        try
        {
            Console.Write("Enter the number of rows: ");
            int rows;

            if (!int.TryParse(Console.ReadLine(), out rows) || rows <= 0)
            {
                throw new ArgumentException("Invalid number of rows. Please enter a positive integer.");
            }

            int[,] array = new int[rows, 2];

            Console.WriteLine("Enter elements for the array:");

            for (int i = 0; i < rows; i++)
            {
                array[i, 0] = GetUserInputForElement(i, "X");
                array[i, 1] = GetUserInputForElement(i, "Y");
            }

            return array;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error in GetUserInputForArray: {ex.Message}");
        }
    }

    public static char GetUserInputForSortArray()
    {
        try
        {
            Console.Write("Enter the array to sort (X or Y): ");
            char arrayToSort;

            if (!char.TryParse(Console.ReadLine().ToUpper(), out arrayToSort) || (arrayToSort != 'X' && arrayToSort != 'Y'))
            {
                throw new ArgumentException("Invalid array choice. Please enter 'X' or 'Y'.");
            }

            return arrayToSort;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error in GetUserInputForSortArray: {ex.Message}");
        }
    }

    public static int GetUserInputForSortOrder()
    {
        try
        {
            Console.Write("Enter the sort order (1 for ascending, 2 for descending): ");
            int sortOrder;

            if (!int.TryParse(Console.ReadLine(), out sortOrder) || (sortOrder != 1 && sortOrder != 2))
            {
                throw new ArgumentException("Invalid sort order. Please enter 1 for ascending or 2 for descending.");
            }

            return sortOrder;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error in GetUserInputForSortOrder: {ex.Message}");
        }
    }

    static int GetUserInputForElement(int rowIndex, string columnName)
    {
        try
        {
            Console.Write($"Enter element for [{rowIndex}, {columnName}]: ");
            int element;

            if (!int.TryParse(Console.ReadLine(), out element))
            {
                throw new ArgumentException($"Invalid input for {columnName}. Please enter an integer.");
            }

            return element;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error in GetUserInputForElement: {ex.Message}");
        }
    }
}
