using System;

class FileTransferCalculator
{
    static void Main()
    {
        int fileSize;
        string unit;

        try
        {
            #region GetFileSize
            fileSize = GetFileSize();
            #endregion

            #region GetFileUnit
            unit = GetFileUnit();
            #endregion

            #region CalculateAndDisplay
            if (IsValidInput(fileSize, unit))
            {
                int bytes = ConvertToBytes(fileSize, unit);
                int transferTime = CalculateTransferTime(bytes, 960);
                DisplayTransferTime(transferTime);
            }
            else
            {
                Console.WriteLine("Invalid input. Exiting the program.");
            }
            #endregion
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    #region HelperMethods
    static int GetFileSize()
    {
        try
        {
            int fileSize;
            do
            {
                Console.WriteLine("Enter file size:");
            } while (!int.TryParse(Console.ReadLine(), out fileSize) || fileSize <= 0);

            return fileSize;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in GetFileSize: {ex.Message}");
            throw;
        }
    }

    static string GetFileUnit()
    {
        try
        {
            string unit;
            do
            {
                Console.WriteLine("Enter unit of file size (b, kb, mb):");
                unit = Console.ReadLine().ToLower();
            } while (unit != "b" && unit != "kb" && unit != "mb");

            return unit;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in GetFileUnit: {ex.Message}");
            throw;
        }
    }

    static bool IsValidInput(int fileSize, string unit)
    {
        try
        {
            return fileSize > 0 && (unit == "b" || unit == "kb" || unit == "mb");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in IsValidInput: {ex.Message}");
            throw;
        }
    }

    static int ConvertToBytes(int size, string unit)
    {
        try
        {
            switch (unit)
            {
                case "b":
                    return size;
                case "kb":
                    return size * 1024;
                case "mb":
                    return size * 1024 * 1024;
                default:
                    return 0; // This is just to satisfy the compiler; it will never reach here.
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ConvertToBytes: {ex.Message}");
            throw;
        }
    }

    static int CalculateTransferTime(int fileSize, int transmissionRate)
    {
        try
        {
            return fileSize / transmissionRate;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CalculateTransferTime: {ex.Message}");
            throw;
        }
    }

    static void DisplayTransferTime(int seconds)
    {
        try
        {
            TimeSpan timeSpan = TimeSpan.FromSeconds(seconds);
            Console.WriteLine("Time of file transfer: " + $"{timeSpan.Days} days, {timeSpan.Hours} hours, {timeSpan.Minutes} minutes, {timeSpan.Seconds} seconds");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DisplayTransferTime: {ex.Message}");
            throw;
        }
    }
    #endregion
}
