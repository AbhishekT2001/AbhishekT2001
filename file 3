using System;

class Program
{
    static void Main()
    {
        try
        {
            int[,] multiArray = GetUserInputForArray();
            PrintArray("Original Array", multiArray);

            char arrayToSort = GetUserInputForSortArray();
            SortArrayByColumn(multiArray, arrayToSort);
            PrintArray($"Sorted {arrayToSort} Array", multiArray);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    #region User Input

    static int[,] GetUserInputForArray()
    {
        try
        {
            Console.Write("Enter the number of rows: ");
            int rows;

            if (!int.TryParse(Console.ReadLine(), out rows) || rows <= 0)
            {
                throw new ArgumentException("Invalid number of rows. Please enter a positive integer.");
            }

            int[,] array = new int[rows, 2];

            Console.WriteLine("Enter elements for the array:");

            for (int i = 0; i < rows; i++)
            {
                array[i, 0] = GetUserInputForElement(i, "X");
                array[i, 1] = GetUserInputForElement(i, "Y");
            }

            return array;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error in GetUserInputForArray: {ex.Message}");
        }
    }

    static int GetUserInputForElement(int rowIndex, string columnName)
    {
        try
        {
            Console.Write($"Enter element for [{rowIndex}, {columnName}]: ");
            int element;

            if (!int.TryParse(Console.ReadLine(), out element))
            {
                throw new ArgumentException($"Invalid input for {columnName}. Please enter an integer.");
            }

            return element;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error in GetUserInputForElement: {ex.Message}");
        }
    }

    static char GetUserInputForSortArray()
    {
        try
        {
            Console.Write("Enter the array to sort (X or Y): ");
            char arrayToSort;

            if (!char.TryParse(Console.ReadLine().ToUpper(), out arrayToSort) || (arrayToSort != 'X' && arrayToSort != 'Y'))
            {
                throw new ArgumentException("Invalid array choice. Please enter 'X' or 'Y'.");
            }

            return arrayToSort;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error in GetUserInputForSortArray: {ex.Message}");
        }
    }

    #endregion

    #region Sorting

    static void SortArrayByColumn(int[,] array, char column)
    {
        try
        {
            int columnIndex = (column == 'X') ? 0 : (column == 'Y') ? 1 : -1;

            if (columnIndex == -1)
            {
                throw new ArgumentException("Invalid array choice. Exiting program.");
            }

            int rows = array.GetLength(0);

            for (int i = 0; i < rows - 1; i++)
            {
                for (int j = i + 1; j < rows; j++)
                {
                    if (array[i, columnIndex] > array[j, columnIndex])
                    {
                        SwapRows(array, i, j);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"Error in SortArrayByColumn: {ex.Message}");
        }
    }

    static void SwapRows(int[,] array, int row1, int row2)
    {
        try
        {
            int columns = array.GetLength(1);

            for (int k = 0; k < columns; k++)
            {
                int temp = array[row1, k];
                array[row1, k] = array[row2, k];
                array[row2, k] = temp;
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"Error in SwapRows: {ex.Message}");
        }
    }

    #endregion

    #region Printing

    static void PrintArray(string arrayName, int[,] array)
    {
        try
        {
            Console.WriteLine($"{arrayName}:");
            int rows = array.GetLength(0);

            for (int i = 0; i < rows; i++)
            {
                Console.WriteLine($"[{array[i, 0]}, {array[i, 1]}]");
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"Error in PrintArray: {ex.Message}");
        }
    }

    #endregion
}
